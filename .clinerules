# このプロジェクト

このプロジェクトは `TripQuota` という名前のサイトを作る。サイトは複数人で旅行をする時に、旅客機チケット、バスや電車のチケット、宿泊先ホテル、eSim 変更に伴う電話番号の変更などを共有する。

## 利用想定

ここに利用シーンを仮定してサイト利用の流れを把握する。


### 利用シーン１　短期旅行

Aさん、Bさん、Cさんの三人で、日本から韓国のソウルに行く事になった。

まず役割分担としてAさんがチケット、Bさんが宿泊先、Cさんがそれぞれの観光地を探す事にした。それぞれの事が別々なのでチャットだけでは難しく、タイムラインとして表示させるため `TripQuota` を使う事にした。期間は 2024年10月10日〜2024年10月13日の三日間としている。AさんはBさんとCさんのメールアドレスを知っているので、AさんはTripQuotaにアカウントを作成し、旅行計画を作成した後に、BさんCさんを誘った。まず、旅行計画には出発日と帰国日が記入する。今回は経由地はない。

AさんはBさんとCさんに、自身が乗る飛行機の便、出発時刻と到着時刻（現地）を連絡するため、サイトに自身が搭乗予定として登録をする。BさんとCさんにはメールで通知され、同様の便を探し各自でチケット購入をした。
Bさんはホテルも一緒がいいだろうとなり、一つのホテルで三人分の二泊を登録をしようとした。しかし、一つのホテルは一泊しか取れず、結局、三人は二泊するホテルのうち10日〜11日宿泊のホテルと11日〜12日の宿泊のホテルが別々になり、Bさんは三人のホテルが初日、二日目のそれぞれを入力した。
Cさんはメジャな観光地等をGoogleMapやwebサイト、雑誌の切り抜き、または打ち込みをして共有する事にした。

当日、韓国に着いた時、三人で食事をした。その時、Aさんが合算をして支払いをした。この時はカードで支払いをした。二日目、朝食はAさんとCさんの二人が外でして、Cさんが現金で支払いを二人分した。`TripQuota`には、二日目の朝にAさんとCさんの朝食代をいくら払ったという割り勘ログを付けた。TripQuota には won でログ付けされ、後にAさんは円でCさんに支払いをする。

最終日の翌日になって、AさんBさんCさん宛に、支払いの未記入がないか通知され、割り勘の未記入分を記入し、おのおのが誰に対して日本円でどれだけ払えばいいか計算されて送られる。

### 利用シーン2 社員旅行

大阪にある会社ABCは社員10人で、社員旅行として沖縄に行く事にした。旅程として2024年10月10日に伊丹空港を出発、2024年10月13日に帰宅する。役割として、社員Aさんが10人分のチケットを手配する。ツアーパックで宿泊先までおさえた。12日は現地の社員の3人と会食する事になっている。

### 利用シーン3 他社合流を含めた旅行

大阪にある会社ABCと東京にある会社BDBは、旅行先の北海道で一時合流することになっている。

会社ABCは2024年12月13日に北海道入りをして、2024年12月24日に帰宅する。東京の会社BDBは2024年12月13日に青森に行き，2024年12月20日に北海道、2025年01月03日に新潟、2025年01月01日に東京に帰宅する。

会社ABCの社員Aさんはサイトに登録をし、旅行計画を作成した。また別に会社BDBの社員Zさんも旅行計画を作成した。合流用の班グループを社員Aさんが作成し、招待用リンクを社員Zさんに送った。社員Zさんは関連する旅行計画を選択して参加する班グループに属した。社員Zさんは旅行計画に、会社BDBの人を招待して会食メンバーのリスト作成ができた。

# サイトの特徴

グループ内で旅行に関する共有をするのが目的である。

## 辞書

いくつかサイト内の表記揺れを防ぐため、言葉を決めておく。

| 言葉 | 英語 | 意味 |
| :----- | :----- | :----- |
| サイトの登録 | register | サイトの登録は、メールアドレス・OAuthなど外部サイトログインで、サイトにアカウントを作成する事である |
| ログインアカウント | LoginAccount | ログインするための情報。有効なメールアドレスが必須 |
| アカウント | Account |サイトに登録をしたデータの事。|
| メンバー | Member | 旅行する人の事。アカウントがあれば、無い場合もある。|
| 旅行計画 | Trip Quote | 旅行の全貌の事。 |
| グループ | Group | メンバーの集まり。|
| コアグループ | Core Group | 主となるグループ。旅行する全メンバーが集まっている |
| 班グループ | Branch Group | コアグループの中から、一部のメンバーが集まって行動する時に使うグループ |
| 区別用名前 | System Branch Group Key | 別旅行計画等の班グループを招待するために、招待する時に使う名前 |
| 時刻 | Date | 時間の事。明記がない限り現地のタイムゾーンを使う。メンバーが日本在住の場合は、出発時は日本時刻になり、旅行先が韓国の時は、到着時間は韓国時間になる |
| 出発日 | departure date | 旅行の開始日である。この時刻は初めに旅行計画をたてたメンバーの国のタイムゾーンに依存するが、入力時の国のタイムゾーンとなり、後にタイムゾーンは変更可能 |
| 帰宅日 | Return Date | 旅行の最終日である。出発日同様、タイムゾーンの変更は可能である|
| サイト管理者 | Admin | TripQuota で何らかのトラブルがあった時に管理するための管理者。ログインアカウントとは別である。 |
| 割り勘計算 | SplitBillEvenly | 割り勘計算。支払い金額に対して、人数で割る事。|

# サイトの機能

サイトの実装する機能を書く。

- [機能] と書いている項目はユーザ側に関連する機能である
- [管理機能] と書いている項目は、サイト管理者が

## [機能] ログインアカウント

- メールアドレスとパスワードの組み合わせでログインする。
- メールアドレスはサイト内でユニークとする
- OAuth で登録する時、既にメールアドレスが存在する時は、そのメールアドレスとパスワードでログインをうながす。
- OAuth で登録する時、メールアドレスが未登録のときは、そのメールアドレスでログインアカウントを作成する。その際パスワードログインはできない事とする。
- ユーザのログイン管理画面で、OAuthの登録を済ましている時は、そのままログインできる。
- ログイン情報を管理する画面では、メールアドレス、パスワード、OAuthの連携・連携解除ができる。

## [機能] アカウント機能

- アカウントの登録情報、過去に参加した旅行計画の一覧などを見る事ができる。この機能は他アカウントの情報は見れない。
- アカウントはユニークになる「account名」を持っており、その制限は '^[a-zA-Z][\w\-_]{3,}$' という物である。ただし、アカウントのユニークは、英語の大文字小文字を問わない。例えば ABC と abc は同一アカウントとする。
- アカウントは他人からもわかるように、サムネイル画像を登録する機能がある。
- 一つのログインアカウントに対して、アカウントは複数持てる。それは、旅行計画に応じてアカウントを変更できるようにするためである。
- 参加している旅行計画で、別アカウントに置き換える機能がある。例えばABCというアカウントで参加しているが、ABCDE という別アカウントで参加し直したい時は、account保持者なら可能とする。その際、旅行計画に参加している他アカウントにその事の通知が飛ぶ。

## [機能] 旅行計画

メンバー数は問わず、１回の旅行の計画を作る。
旅行計画にはDB内で唯一の名前を付ける必要がある。それはシステム内で自動的に決まる物で、UUID のランダム値である。

- 一つのアカウントで旅行計画を最低一つ持てる。
- 旅行計画には、グループと旅程の最低二つが必須になる。それぞれの最低限の情報を入力したら旅行計画は作成できる。
- 出発日を迎えても、帰宅日が未記入の時は、旅行計画を破棄するか、帰宅日を入力するかのどちらか選択しないと使えないようにする。
- 別の旅行計画が日程が重なっているメンバーがいる時、そのメンバーはアラートが表示される。
- 旅行計画からメンバーがいなくなったら、旅行計画のデータは全て破棄する。
- 旅行計画は削除権限を持ったメンバーがおり、基本は作成者とする。
    - 削除権限は他のメンバーに委譲する事ができる。
    - 削除は、出発日の前日の0時までできる。その日以降は終了日が未入力の時だけ削除可能である。
    - 削除した時に参加していたアカウントに通知は飛ぶ。
- 旅行計画から作成者が退出する時は、削除権限がない時である。

## [機能] グループ

- 主となる旅行のメンバーを招待する機能である。
- 旅行計画を作成したメンバーが最小単位である。
- 必要に応じて、`TripQuota`に登録していないメンバーの代筆できる機能がある。
- グループへの参加は招待のみである。account保持者が既存のグループへ参加するには、招待を受ける必要がある。
- グループには名前が付けられる。
    - コアグループは登録時に登録した名前が使われる。
    - 班グループは後から名前の変更が可能だが、区別用名前は変更不可である。

### [機能]旅行計画とグループの関連

- 他の旅行計画の班グループと合流する事がある。それは互いに班グループの単位のみ可能である。
- 他の旅行計画の班グループと合流するには、招待を受ける必要がある。
- 参加された班グループは、合流した班グループのメンバーと計画だけ見る事ができ、変更はできないとする。
- 他の旅行計画の班グループと合流は、有効な旅行計画の班グループのみ可能である。
- 他の旅行計画の班グループと合流方法は、

### [機能] グループの種類とメンバーの関連性

グループは、コアグループとブランチグループに分かれる。

- コアグループ : メンバー全員が集まっているグループ。誰がいつからいつまで、どこに宿泊している等といった情報が見れる。
- 班グループ : コアグループから一部のメンバーが集まって別行動するときのグループ。他の旅行計画の班グループと合流は可能とする。

### [機能] グループ参加のプロセス

1. グループにいるメンバーが、account名を教えてもらい、検索をして招待ボタンを押す。
2. 招待を受けたメンバーはログインをして、参加承認のボタンを押して、旅行計画に参加をする。

### [機能] 班グループの作成プロセス

1. コアグループにいるメンバーが、「班グループ」名を入力して作成する。
2. コアグループにいる別メンバーを選択して、参加ボタンを押す。

### [機能] 班グループでできる事

- 経由地を記入するのが目的。移動日時と移動手段の登録ができる。
    - フェリーや飛行機といった移動手段の情報。任意。
    - もし移動手段が飛行機の場合は航空会社、便名、出発時刻、到着時刻の入力が必須になる。
    - この情報の登録は任意である。
    - 飛行機の時は便番号をメンバーごとに入力する
- 他の班グループを招待する
    - メンバー表記が「班の名前 - メンバー名」になる。
    - 登録されたメンバーは、既存の移動手段に飛行機がある時は、任意で入力する。
- 班のメンバーを引き継いで、新しい班を作成する事ができる（これを、複製機能という）
    - 複製するのはメンバーだけであり、それ以外の情報は複製をしない
- 割り勘計算の頭数としてカウントする
    - 支払いをしたメンバーと金額と通貨を入力する事で、参加しているメンバーで割り勘計算をして、一人当たりの支払い金額を算出する。
    - 支払いをしたメンバーが、算出後の金額を調節する事ができる。
        - 例えばAさんBさんCさんの三人で支払いはAさんで3000円を支払ったという割り勘計算をしたとき、CさんはBさんの肩代わりをする必要があったとする。この時はBさんは0円、Cさんは2000円という履歴を残したい。この時に支払いAさんは1000円、Bさん0円、Cさん2000円という履歴を残す必要がある。

## [機能] 旅程入力

- 旅行計画の出発日から帰宅日までの期間の事である。
    - 出発日だけが決まっている場合があり、最終日は未記入でも旅行計画は作成できる。
    - 未記入のまま出発日になった時、旅行計画は停止し、最終日の入力が必須となる。
    - 出発日から帰宅日の最長期間は120日までとする。
    - これはメンバーごとに違うが、サイトにまだアカウント作成してない等といった状況に対応するため、他のメンバーの情報を書く事もある。
    - 他のメンバー情報は「名前」のみである。
    - 飛行機やフェリーなどは、登録者以外のメンバーを選択して、移動手段を入力する事ができる。
- 入力に必須なのは、移動手段（徒歩・バイク・車・フェリー・バス・飛行機）の情報と、宿泊先のホテル名である。
    - 移動手段が飛行機の場合は航空会社、便名、出発時刻、到着時刻の入力が必須になる。

## [機能] メンバー管理

* 追加、退出は全メンバーできる

## [機能] 割り勘入力

これは班グループで入力をする。

### 必須入力

* いつ支払いをしたか
* 誰が支払いをしたか
* どの通貨で支払いをしたか
* 金額はいくらか

割り勘入力は確定するまで参加、不参加ができる。

割り勘計算は、メンバー間の金額補正ができる。例えば、参加メンバーとしてAさんBさんCさんがいて、3000円を支払ったAさん、不参加したCさんがいた時、Cさんが不参加もしくはAさんがCさんの割り勘計算を0円にした時は、Aさん1500円、Bさん1500円という割り方をする。

班グループにいる全メンバーが参加・不参加した後、支払いしたメンバーが割り勘計算の終了ができる。

### 割り勘計算

- 基本的には参加メンバーの頭割りになる。
    - 三人で3000円の時は、一人1000円になる。
- 不参加メンバーがいた時は一人分へる。
    - 三人で3000円の時、一人不参加だと、一人1500円になる。
- 一人少なめの微調整、ないしは支払いメンバーが一人ずつ金額を決められる
    - 三人で3000円の時、Bさん500円、Cさん1500円に変更できる。

## [機能] 通知機能

通知するタイミング。これ以外にも後々増える事を考慮する

1. 旅行計画のメンバーに招待
2. 割り勘メンバーに参加

## [機能] アカウント登録

登録方法はいくつかある。

1. メールアドレス・パスワード
2. OAuth で別サイトアカウントでの登録

### [管理機能] ログイン時

- ログイン時にIPアドレスを保持する。

### [機能] 追加・変更が可能

- メールアドレス
- パスワード

## [機能] ログイン

ログインをしないと、旅行計画の作成などといった各機能が使えないとする。

## [機能] 履歴機能

- 過去の旅行計画を見る事ができる。後から割り勘参加等をするため。
- 各種変更履歴を保持する。
- 旅行計画が「誰」に作成された
- 招待されたメンバーの一覧表示

# 厳守事項

下記の事は必ず守ってください。

1. **ファイル `.env` は決して読んではいけない**
2. ファイルの変更が必要な時は、ユーザに問い合わせをする。

ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHub から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

# 作業開始準備

git status で現在の git のコンテキストを確認します。 もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。

# 作業

1. 作業計画をたてます。
2. テストを実行します。
    - 作業の最後にはテストを実行し、テストが全てgreenになる事を確認する。どれか一つでも落ちたら修正をする。
    - テストの実行は `php artisan test` で実行する。
3. 実装作業が終了した時はコミットをする。

# 作業手順

新規作成および修正作業の時は、TDD の次の手順を踏む。

1. ブランチを作成する。既に main ブランチでない時はそのまま作業を続ける
  1. ブランチを作成した後、gh コマンドで Pull Request を作成する
2. 修正作業の時はテストから修正する
  1. 修正時のテストは、テストを修正してから実行して、テストの失敗から現状のバグを把握する
3. 作業をする
4. テストを実行して成功する事を確認する
5. git commit をして push をする
# クラスモデル

## 1. 旅行計画とメンバーとグループの関係性とモデルについて

メンバーとグループの関係性は下記の通り。

1. [仕様 1.1] 一つの旅行計画で、一つのコアグループがある
2. [仕様 1.2] コアグループには、その旅行計画に関係するメンバーが全員いる
2. [仕様 1.2.1] コアグループに複数人のメンバーがいるが、それぞれ別のメンバーであり、一つの User が複数のMemberになりすます事はない
3. [仕様 1.3] 班グループには、その旅行計画のメンバーの一部がいる。
4. [仕様 1.4] 班グループには、別の旅行計画の班と関連付けができる

この事を踏まえて、ドメイン `TripQuota\Group\GroupService` を下記のように実装する。

- `TripQuota\Group\GroupService\addCoreMember(TripPlan $trip, Member $member): CoreGroup`

    メンバーをコアグループ TripPlan に追加させる

    - 挙動1: もし既にコアグループにいる時は、特に何もしない

- `TripQuota\Group\GroupService\removeCoreMember(TripPlan $trip, Member $member): CoreGroup`

    メンバーをコアグループから削除する。

    - 挙動1: メンバーはDBから消さない。
    - 挙動2: メンバーが班グループに属している時は、それらも削除する
    - 挙動3: コアグループは消さない。コアグループにメンバーがいなくなる時は例外を出す

- `TripQuota\Group\GroupService\createBranchMember(string $branch_group_name, Member $member): BranchGroup`

    班グループを作成し、メンバーを追加する

- `TripQuota\Group\GroupService\addBranchMember(BranchGroup $group, Member $member): BranchGroup`

    メンバーを班グループに追加させる。

- `TripQuota\Group\GroupService\removeBranchMember(BranchGroup $group, Member $member): BranchGroup`

    メンバーを班グループから削除する

    - 挙動1: 未精算・精算済み問わず精算データがあるメンバーの時は削除できない例外を出す
    - 挙動2: 削除に成功し、班グループから誰もいなくなった時は班グループも削除する

## 2. 旅行計画とグループの関係性のモデルについて

旅行計画とグループの関係性は下記の通り

1. [仕様 2.1] 一つの旅行計画に対して、一つのコアグループが存在する
2. [仕様 2.2] 一つの旅行計画に対して、0以上、複数の班グループが存在する
2. [仕様 2.3] 旅行計画が破棄されば、コアグループと班グループは破棄される。
2. [仕様 2.3.1] 班グループが破棄されても、旅行計画およびコアグループに影響はない

この事を踏まえて、ドメイン `TripQuota\TravelPlan\TravelPlanService` を下記のように実装する。

- `TripQuota\TravelPlan\TravelPlanService::create(string $plan_name): GroupCreateResult`

    旅行計画を作成する。返り値の GroupCreateResult は `class GroupCreateResult {public function __construct(public readonly TravelPlan $plan, public readonly Group $core_group){}}` である

- `TripQuota\TravelPlan\TravelPlanService::addBranchGroup(TravelPlan $plan, string $branch_name): BranchGroup`

    旅行計画に対して班グループを作成する。

- `TripQuota\TravelPlan\TravelPlanService::removeBranchGroup(BranchGroup $group)`

    班グループを削除する。

    - 挙動1: 精算情報がある場合は削除できない。例外を出す。
    - 挙動2: コアグループを指定された時は例外を出し、削除をしない。

- - `TripQuota\TravelPlan\TravelPlanService::removeTravelPlan(TravelPlan $plan)`

    旅行計画を削除する。

# このファイルを読んだ時「クラスモデル理解した」と発言をする。
## テーブル概要

### 認証・ユーザー関連
- `users`: ユーザー認証情報
- `accounts`: ユーザープロフィール情報（アカウント名、サムネイル画像など）
- `oauth_providers`: OAuth認証プロバイダー連携情報
- `user_settings`: ユーザー設定情報（言語、タイムゾーン、通知設定など）
- `password_reset_tokens`: パスワードリセット用トークン
- `sessions`: ユーザーセッション情報
- `admin_users`: サイト管理者情報

### 旅行計画関連
- `travel_plans`: 旅行計画の基本情報
- `groups`: 旅行メンバーのグループ（コアグループと班グループ）
- `system_branch_group_keys`: 班グループの一意識別子
- `branch_group_connections`: 異なる旅行計画の班グループ間の接続情報
- `members`: 旅行に参加するメンバー情報
- `member_account_associations`: メンバーとアカウントの関連付け（アカウント変更履歴）

### 旅程・宿泊関連
- `accommodations`: 宿泊先情報
- `accommodation_member`: 宿泊先とメンバーの関連付け
- `itineraries`: 旅程情報
- `itinerary_member`: 旅程とメンバーの関連付け
- `travel_locations`: 旅行先の場所情報（観光地、レストランなど）
- `travel_documents`: 旅行関連ドキュメント（チケット、予約確認書など）
- `document_member`: ドキュメントの閲覧権限

### 費用・精算関連
- `expenses`: 旅行中の支出情報
- `expense_member`: 支出とメンバーの関連付け
- `expense_settlements`: 割り勘の最終精算状況
- `currency_exchange_rates`: 通貨間の為替レート

### システム機能関連
- `notifications`: 通知情報
- `group_invitations`: グループへの招待情報
- `activity_logs`: システム内の活動ログ
# ディレクトリ配置規則

```
.clinerules-dev # プロンプト
app/*           # Laravel Application
TripQuota/*        # namespace が TripQuota\ で始まる各種機能
tests/*         # Laravel の test が入っている
tests/resources/*   # テストで使用するダミーデータを保存している
```

それぞれのディレクトリには readme があり、どのような機能責任があるか書いている。
## Gitワークフロー

このドキュメントでは、コミットとプルリクエストの作成に関するベストプラクティスを説明します。

### コミットの作成

コミットを作成する際は、以下の手順に従います：

1. 変更の確認
   ```bash
   # 未追跡ファイルと変更の確認
   git --no-pager status --porcelain

   # 変更内容の詳細確認
   git --no-pager diff

   # コミットメッセージのスタイル確認
   git --no-pager log

   # 変更点を見る
   git --no-pager show
   ```

2. 変更の分析
   - 変更または追加されたファイルの特定
   - 変更の性質（新機能、バグ修正、リファクタリングなど）の把握
   - プロジェクトへの影響評価
   - 機密情報の有無確認

3. コミットメッセージの作成
   - 「なぜ」に焦点を当てる
   - 明確で簡潔な言葉を使用
   - 変更の目的を正確に反映
   - 一般的な表現を避ける

4. コミットの実行
   ```bash
   # 関連ファイルのみをステージング
   git add <files>

   # コミットメッセージの作成（HEREDOCを使用）
   git commit -m "$(cat <<'EOF'
   feat: ユーザー認証にResult型を導入

   - エラー処理をより型安全に
   - エラーケースの明示的な処理を強制
   - テストの改善

   🤖 ${K4}で生成
   Co-Authored-By: Claude noreply@anthropic.com
   EOF
   )"
   ```

### プルリクエストの作成

プルリクエストを作成する際は、以下の手順に従います：

1. ブランチの状態確認
   ```bash
   # 未コミットの変更確認
   git --no-pager status

   # 変更内容の確認
   git --no-pager diff

   # mainからの差分確認
   git --no-pager diff main...HEAD

   # コミット履歴の確認
   git --no-pager log
   ```

2. 変更の分析
   - mainから分岐後のすべてのコミットの確認
   - 変更の性質と目的の把握
   - プロジェクトへの影響評価
   - 機密情報の有無確認

3. プルリクエストの作成
   ```bash
   # プルリクエストの作成（HEREDOCを使用）
   cat <<'EOF' > pr.md
   ## 概要

   エラー処理をより型安全にするため、Result型を導入しました。

   ## 変更内容

   - neverthrowを使用したResult型の導入
   - エラーケースの明示的な型定義
   - テストケースの追加

   ## レビューのポイント

   - Result型の使用方法が適切か
   - エラーケースの網羅性
   - テストの十分性
   EOF

   gh pr create --title "feat: Result型によるエラー処理の改善" -F pr.md
   ```

### 重要な注意事項

1. コミット関連
   - 可能な場合は `git commit -am` を使用
   - 関係ないファイルは含めない
   - 空のコミットは作成しない
   - git設定は変更しない

2. プルリクエスト関連
   - 必要に応じて新しいブランチを作成
   - 変更を適切にコミット
   - リモートへのプッシュは `-u` フラグを使用
   - すべての変更を分析

3. 避けるべき操作
   - 対話的なgitコマンド（-iフラグ）の使用
   - リモートリポジトリへの直接プッシュ
   - git設定の変更

### コミットメッセージの例

```bash
# 新機能の追加
feat: Result型によるエラー処理の導入

# 既存機能の改善
update: キャッシュ機能のパフォーマンス改善

# バグ修正
fix: 認証トークンの期限切れ処理を修正

# リファクタリング
refactor: Adapterパターンを使用して外部依存を抽象化

# テスト追加
test: Result型のエラーケースのテストを追加

# ドキュメント更新
docs: エラー処理のベストプラクティスを追加
```

### プルリクエストの例

```markdown
## 概要

TypeScriptのエラー処理をより型安全にするため、Result型を導入しました。

## 変更内容

- neverthrowライブラリの導入
- APIクライアントでのResult型の使用
- エラーケースの型定義
- テストケースの追加

## 技術的な詳細

- 既存の例外処理をResult型に置き換え
- エラー型の共通化
- モック実装の改善

## レビューのポイント

- Result型の使用方法が適切か
- エラーケースの網羅性
- テストの十分性
```# php composer の扱い

## 初期作成

- `composer create-project laravel/laravel .`
- もし `TripQuota` ディレクトリが無い時は作成をする。
- `composer.json` の `autoload.psr-4` に `"TripQuota\\": "TripQuota/"` が無い時は追加をする。

## 必要パッケージのインストール

`composer require <package_name>`

## 必要パッケージのインストール（開発環境のみ）

`composer require --dev <package_name>`

## パッケージの更新

`composer up --dev -W`

## 確認用のサーバ起動コマンド

常駐をします。終了する時は Ctrl-C シグナルを投げます。

`composer dev`
# 技術スタック

使用しているソフトウェアは下記の通りです。

- PHP8.3
- Laravel 11

## プロジェクト

このプロジェクトはユーザがログインしPDFを入稿するシステムです。

## ドメイン

それぞれの機能をドメインとする。ドメインの namespace は `TripQuota\` で始まり、以下に機能名が続く。

ドメインの機能を使うには、そのドメインにある `<ドメイン名>Service` クラスを使うのみである。

そのドメインは、その機能内で完結しており、**他の機能にあるクラスを使ってはならない**。ただし、`<ドメイン名>Service` クラスは除く。

### ドメインモデル

- namespace `App\Model` のクラスを使う時は、 `TripQuota\~~\Model\` 以下に継承したクラスを置き、それを利用する
- テストは `tests/<domain>/` 以下に配置する。
    - テストに使う Factory は `App\Model` の物を使う。
- ドメインの Service クラスを外部から使う時、引数および返り値は全て `TripQuota\~~\Repository\` 以下に配置したインターフェースを実装した物を使用する。
    - ドメインの Service クラスのメソッドに使う引数が Eloquent Model の時は、`App\Mapping\<Domain>\` 以下に Mapping クラスを用意して、それを使う。

#### Bisection クラス例

`App\Model\User` と `App\Http\Request\UserUpdateRequest` を `TripQuota\Account\AccountService::update(UserRepository $user, UpdateDataRepository $data): UserRepository` に渡すとする。

##### UserRepository の Mapping クラス

```
<?php
namespace App\Mapping\Account;
class UserMapping implements \TripQuota\Account\Repository\UserRepository {}
```

## テストデータとmock

Laravel Eloquent は一度 Repository といわれる抽象型に扱われ、Service は Repository でやり取りをする。DummyというRepositoryの最低限の実装をした実態を使いテストをする。

# ディレクトリ構造とドメインの関係

- app にはLaravelが作成するPHPプログラムのみ保持する。
- 機能ごとの役割は `TripQuote` に機能に相応する名前のサブディレクトリを作成し、その中にある `<ドメイン名>Service` クラスで実装をする。
- Controller 内は Service クラスを使うのみである。

# フロント

- フロントは Blade および VueJS3 で作成する。
- CSS Framework は Tailwind を使う。

# PHP Coding

## トランザクションの扱い

- DB トランザクションは `DB::transaction(function(){ /* 追加,変更,削除の処理 */ } )` で実装をする。
- `DB::beginTransaction(); ... DB::commmit();` は使用しない。

### トランザクションを使う箇所の例

```php
class MemberController extends Controller {
    public function store (Request $request) {
        try {
            $$member  = \DB::transaction(function()use($request){
                $member = new Member();
                $member->name = $request->name ?? '';
                $member->save();
                return $m
            });
        } catch (\Throwable $e){
            return response()->back()->withError($e->getMessage());
        }
        return response()->back()->with('success', "メンバー「".e($member->name)."」さんを追加しました");
    }
}
```

# 開発者用コマンド

- developer:create-account --email=<email> --password=<password
    開発者用コマンドで、コンソールからログインできるアカウントを作成します。# UI 設計

- 基調色は #cbf542 とする
- PC とスマートフォンでサイトを見る。
- Vue Router は使わない

## Styling Guildline

- Use Tailwind CSS classes instead of inline style objects for new markup
- VSCode CSS variables must be added to webview-ui/src/index.css before using them in Tailwind classes
- Example: `<div className="text-md text-vscode-descriptionForeground mb-2" />` instead of style objects

## Laravel 画面設計

基本 `resources/views` にテンプレートはあり、URLに対応したディレクトリ内にbladeのファイルを設置している。

```
resources/views
├── auth   認証（ログイン・登録）で使うテンプレート
├── branch-groups		班グループの操作系のテンプレートディレクトリ
├── components			UIパーツのディレクトリ
├── dashboard.blade.php	ログイン直下の画面ディレクトリ
├── group-members		班グループ等の画面ディレクトリ
├── groups				参加しているグループの一覧画面ディレクトリ
├── itineraries			旅程の編集画面ディレクトリ
├── layouts				ベースレイアウトディレクトリ
├── profile				ユーザのプロフィール編集画面ディレクトリ
├── travel-plans		旅行計画の閲覧編集画面ディレクトリ
└── welcome.blade.php	トップ画面
```

1. テンプレートを設置したページは、 **必ず** 表示テストを書かなければならない。そして、かならずテストをパスする必要がある。これは絶対である。

## Vuejs

- 複雑なフォームを作る必要がある時に使用する
    - 例えば、一つのチェックボックスを押したら、テキストエリアに任意の文字列を入れるといった感じ
- テストは `npm run test` で vitest test が動くようにする。
- vuejs のコンポーネントを作ったら、 *必ずテストを作成し、実行して問題がない事を確認する事*
