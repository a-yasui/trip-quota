# このプロジェクト

このプロジェクトは `TripQuota` という名前のサイトを作る。サイトは複数人で旅行をする時に、旅客機チケット、バスや電車のチケット、宿泊先ホテル、eSim 変更に伴う電話番号の変更などを共有する。

## 利用想定

ここに利用シーンを仮定してサイト利用の流れを把握する。

Aさん、Bさん、Cさんの三人で、日本から韓国のソウルに行く事になった。

まず役割分担としてAさんがチケット、Bさんが宿泊先、Cさんがそれぞれの観光地を探す事にした。それぞれの事が別々なのでチャットだけでは難しく、タイムラインとして表示させるため `TripQuota` を使う事にした。期間は 2024年10月10日〜2024年10月13日の三日間としている。AさんはBさんとCさんのメールアドレスを知っているので、AさんはTripQuotaにアカウントを作成し、旅行計画を作成した後に、BさんCさんを誘った。まず、旅行計画には出発日と帰国日が記入する。今回は経由地はない。

AさんはBさんとCさんに、自身が乗る飛行機の便、出発時刻と到着時刻（現地）を連絡するため、サイトに自身が搭乗予定として登録をする。BさんとCさんにはメールで通知され、同様の便を探し各自でチケット購入をした。
Bさんはホテルも一緒がいいだろうとなり、一つのホテルで三人分の二泊を登録をしようとした。しかし、一つのホテルは一泊しか取れず、結局、三人は二泊するホテルのうち10日〜11日宿泊のホテルと11日〜12日の宿泊のホテルが別々になり、Bさんは三人のホテルが初日、二日目のそれぞれを入力した。
Cさんはメジャな観光地等をGoogleMapやwebサイト、雑誌の切り抜き、または打ち込みをして共有する事にした。

当日、韓国に着いた時、三人で食事をした。その時、Aさんが合算をして支払いをした。この時はカードで支払いをした。二日目、朝食はAさんとCさんの二人が外でして、Cさんが現金で支払いを二人分した。`TripQuota`には、二日目の朝にAさんとCさんの朝食代をいくら払ったという割り勘ログを付けた。TripQuota には won でログ付けされ、後にAさんは円でCさんに支払いをする。

最終日の翌日になって、AさんBさんCさん宛に、支払いの未記入がないか通知され、割り勘の未記入分を記入し、おのおのが誰に対して日本円でどれだけ払えばいいか計算されて送られる。

# サイトの特徴

グループ内で旅行に関する共有をするのが目的である。

## 辞書

いくつかサイト内の表記揺れを防ぐため、言葉を決めておく。

| 言葉 | 意味 |
| :----- | :----- |
| サイトの登録 | サイトの登録は、メールアドレス・OAuthなど外部サイトログインで、サイトにアカウントを作成する事である |
| アカウント | サイトに登録をしたデータの事。|
| メンバー | 旅行する人の事。アカウントがあれば、無い場合もある。|
| グループ | メンバーの集まり。|
| コアグループ | 主となるグループ。旅行する全メンバーが集まっている |
| 班グループ | コアグループの中から、一部のメンバーが集まって行動する時に使うグループ |
| 時刻 | 時間の事。明記がない限り現地のタイムゾーンを使う。メンバーが日本在住の場合は、出発時は日本時刻になり、旅行先が韓国の時は、到着時間は韓国時間になる |
| 出発日 | 旅行の開始日である。この時刻は初めに旅行計画をたてたメンバーの国のタイムゾーンに依存するが、入力時の国のタイムゾーンとなり、後にタイムゾーンは変更可能 |
| 帰宅日 | 旅行の最終日である。出発日同様、タイムゾーンの変更は可能である|

# サイトの機能

サイトの実装する機能を書く。

## [機能] 旅行計画

メンバー数はとわず、１回の旅行の計画を作る場所。

- 旅行計画には、グループと旅程の最低二つが必須になる。それぞれの最低限の情報を入力したら旅行計画は作成できる。
- 旅行計画で出発日を迎えても、帰宅日が未記入の時は、旅行計画を破棄するか、帰宅日を入力するかのどちらか選択しないと使えないようにする。
- 別の旅行計画が日程が重なっているメンバーがいる時、そのメンバーはアラートが表示される。
- 旅行計画からメンバーがいなくなったら、旅行計画のデータは全て破棄する。
- 旅行計画は削除権限を持ったメンバーがおり、基本は作成者とする。
- 削除権限は他のメンバーに委譲する事ができる。
- 旅行計画から作成者が抜ける時は、削除権限は別のメンバーに委譲しているのが前提である。

## [機能] グループ

主となる旅行のメンバーを招待する機能である。
旅行計画を作成したメンバーが最小単位である。
リーダーと言うのは特に決めない。
必要に応じて、`TripQuota`に登録していないメンバーの代筆できる機能がある。

グループは、コアグループとブランチグループに分かれる。

- コアグループ : メンバー全員が集まっているグループ。誰がいつからいつまで、どこに宿泊している等といった情報が見れる。
- 班グループ : コアグループから一部のメンバーが集まって別行動するときのグループ。

## [機能] 旅程入力

- 旅行計画の出発日から帰宅日までの期間の事である。
    - 出発日だけが決まっている場合があり、最終日は未記入でも旅行計画は作成できる。
    - ただし、未記入のまま出発日になった時、旅行計画は停止して、最終日の入力が必須となる。
    - 出発日から帰宅日の最長期間は120日までとする。
    - これはメンバーごとに違うが、サイトにまだアカウント作成してない等といった必要に応じて、他のメンバーの情報を書く事もある。
    - 飛行機やフェリーなどは全員で行動する事が多いので、メンバーを選択して、移動手段を入力する。
- 入力に必須なのは、移動手段（徒歩・バイク・車・フェリー・バス・飛行機）の情報と、宿泊先のホテル名である。
    - 移動手段が飛行機の場合は航空会社、便名、出発時刻、到着時刻の入力が必須になる。

## [機能] メンバー管理

思案中

## [機能] 割り勘入力

思案中

## [機能] 通知機能

思案中

## [機能] アカウント登録

登録方法はいくつかある。

1. メールアドレス・パスワード
2. OAuth で別サイトアカウントでの登録

## [機能] ログイン

ログインをしないと、旅行計画の作成などといった各機能が使えないとする。

# 厳守事項

下記の事は必ず守ってください。

1. **ファイル `.env` は決して読んではいけない**
2. ファイルの変更が必要な時は、ユーザに問い合わせをする。

ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHub から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

# 作業開始準備

git status で現在の git のコンテキストを確認します。 もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。
# ディレクトリ配置規則

```
.clinerules-dev # プロンプト
app/*           # Laravel Application
TripQuota/*        # namespace が TripQuota\ で始まる各種機能
```

それぞれのディレクトリには readme があり、どのような機能責任があるか書いている。## Gitワークフロー

このドキュメントでは、コミットとプルリクエストの作成に関するベストプラクティスを説明します。

### コミットの作成

コミットを作成する際は、以下の手順に従います：

1. 変更の確認
   ```bash
   # 未追跡ファイルと変更の確認
   git status

   # 変更内容の詳細確認
   git diff

   # コミットメッセージのスタイル確認
   git log
   ```

2. 変更の分析
   - 変更または追加されたファイルの特定
   - 変更の性質（新機能、バグ修正、リファクタリングなど）の把握
   - プロジェクトへの影響評価
   - 機密情報の有無確認

3. コミットメッセージの作成
   - 「なぜ」に焦点を当てる
   - 明確で簡潔な言葉を使用
   - 変更の目的を正確に反映
   - 一般的な表現を避ける

4. コミットの実行
   ```bash
   # 関連ファイルのみをステージング
   git add <files>

   # コミットメッセージの作成（HEREDOCを使用）
   git commit -m "$(cat <<'EOF'
   feat: ユーザー認証にResult型を導入

   - エラー処理をより型安全に
   - エラーケースの明示的な処理を強制
   - テストの改善

   🤖 ${K4}で生成
   Co-Authored-By: Claude noreply@anthropic.com
   EOF
   )"
   ```

### プルリクエストの作成

プルリクエストを作成する際は、以下の手順に従います：

1. ブランチの状態確認
   ```bash
   # 未コミットの変更確認
   git status

   # 変更内容の確認
   git diff

   # mainからの差分確認
   git diff main...HEAD

   # コミット履歴の確認
   git log
   ```

2. 変更の分析
   - mainから分岐後のすべてのコミットの確認
   - 変更の性質と目的の把握
   - プロジェクトへの影響評価
   - 機密情報の有無確認

3. プルリクエストの作成
   ```bash
   # プルリクエストの作成（HEREDOCを使用）
   gh pr create --title "feat: Result型によるエラー処理の改善" --body "$(cat <<'EOF'
   ## 概要

   エラー処理をより型安全にするため、Result型を導入しました。

   ## 変更内容

   - neverthrowを使用したResult型の導入
   - エラーケースの明示的な型定義
   - テストケースの追加

   ## レビューのポイント

   - Result型の使用方法が適切か
   - エラーケースの網羅性
   - テストの十分性
   EOF
   )"
   ```

### 重要な注意事項

1. コミット関連
   - 可能な場合は `git commit -am` を使用
   - 関係ないファイルは含めない
   - 空のコミットは作成しない
   - git設定は変更しない

2. プルリクエスト関連
   - 必要に応じて新しいブランチを作成
   - 変更を適切にコミット
   - リモートへのプッシュは `-u` フラグを使用
   - すべての変更を分析

3. 避けるべき操作
   - 対話的なgitコマンド（-iフラグ）の使用
   - リモートリポジトリへの直接プッシュ
   - git設定の変更

### コミットメッセージの例

```bash
# 新機能の追加
feat: Result型によるエラー処理の導入

# 既存機能の改善
update: キャッシュ機能のパフォーマンス改善

# バグ修正
fix: 認証トークンの期限切れ処理を修正

# リファクタリング
refactor: Adapterパターンを使用して外部依存を抽象化

# テスト追加
test: Result型のエラーケースのテストを追加

# ドキュメント更新
docs: エラー処理のベストプラクティスを追加
```

### プルリクエストの例

```markdown
## 概要

TypeScriptのエラー処理をより型安全にするため、Result型を導入しました。

## 変更内容

- neverthrowライブラリの導入
- APIクライアントでのResult型の使用
- エラーケースの型定義
- テストケースの追加

## 技術的な詳細

- 既存の例外処理をResult型に置き換え
- エラー型の共通化
- モック実装の改善

## レビューのポイント

- Result型の使用方法が適切か
- エラーケースの網羅性
- テストの十分性
```# php composer の扱い

## 初期作成

- `composer create-project laravel/laravel .`
- もし `TripQuota` ディレクトリが無い時は作成をする。
- `composer.json` の `autoload.psr-4` に `"TripQuota\\": "TripQuota/"` が無い時は追加をする。

## 必要パッケージのインストール

`composer require <package_name>`

## 必要パッケージのインストール（開発環境のみ）

`composer require --dev <package_name>`

## パッケージの更新

`composer up --dev -W`

# 技術スタック

使用しているソフトウェアは下記の通りです。

- PHP8.3
- Laravel 11

## プロジェクト

このプロジェクトはユーザがログインしPDFを入稿するシステムです。

## ドメイン

それぞれの機能をドメインとする。ドメインの namespace は `TripQuota\` で始まり、以下に機能名が続く。

ドメインの機能を使うには、そのドメインにある `<ドメイン名>Service` クラスを使うのみである。

そのドメインは、その機能内で完結しており、**他の機能にあるクラスを使ってはならない**。ただし、`<ドメイン名>Service` クラスは除く。

## テストデータとmock

Laravel Eloquent は一度 Repository といわれる抽象型に扱われ、Service は Repository でやり取りをする。DummyというRepositoryの最低限の実装をした実態を使いテストをする。